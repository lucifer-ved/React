{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/lucifer/Projects/React/counter-app/src/components/counter.jsx\";\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n\n    this.handleIncrement = () => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n  }\n\n  renderTags() {\n    if (this.state.tags.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are no tags!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 49\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.state.tags.map(tag => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: tag\n      }, tag, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 48\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  } // arrow function don't rebind but inherit this\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeClasses(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleIncrement,\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      count\n    } = this.state;\n    return count === 0 ? 'Zero' : count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/lucifer/Projects/React/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","state","count","handleIncrement","setState","renderTags","tags","length","map","tag","render","getBadgeClasses","formatCount","classes"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC5BE,KAD4B,GACpB;AACJC,MAAAA,KAAK,EAAC;AADF,KADoB;;AAAA,SAW5BC,eAX4B,GAWV,MAAM;AACpB,WAAKC,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAiB;AAA1B,OAAd;AACH,KAb2B;AAAA;;AAK5BG,EAAAA,UAAU,GAAE;AACR,QAAG,KAAKJ,KAAL,CAAWK,IAAX,CAAgBC,MAAhB,KAA2B,CAA9B,EAAiC,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACjC,wBAAO;AAAA,gBAAK,KAAKN,KAAL,CAAWK,IAAX,CAAgBE,GAAhB,CAAoBC,GAAG,iBAAI;AAAA,kBAAeA;AAAf,SAASA,GAAT;AAAA;AAAA;AAAA;AAAA,cAA3B;AAAL;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAR2B,CAU5B;;;AAKAC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAM,QAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA,kBAA2C,KAAKC,WAAL;AAA3C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAE,KAAKT,eAAtB;AAAuC,QAAA,SAAS,EAAC,0BAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAEDQ,EAAAA,eAAe,GAAG;AACd,QAAIE,OAAO,GAAG,kBAAd;AACAA,IAAAA,OAAO,IAAK,KAAKZ,KAAL,CAAWC,KAAX,KAAqB,CAAtB,GAA2B,SAA3B,GAAuC,SAAlD;AACA,WAAOW,OAAP;AACH;;AAEDD,EAAAA,WAAW,GAAE;AACT,UAAM;AAAEV,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACA,WAAOC,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACH;;AAjC2B;;AAoChC,eAAeF,OAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Counter extends Component {\n    state = {  \n        count:0\n    };\n\n    renderTags(){\n        if(this.state.tags.length === 0) return <p>There are no tags!</p>;\n        return <ul>{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}</ul>;\n    }\n\n    // arrow function don't rebind but inherit this\n    handleIncrement = () => {        \n        this.setState({ count: this.state.count+1 });\n    }\n\n    render() {  \n        return (\n            <div>                \n                <span className={this.getBadgeClasses()}>{ this.formatCount() }</span>\n                <button onClick={this.handleIncrement} className=\"btn btn-secondary btn-sm\">Increment</button>\n            </div>\n        );\n    }\n\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += (this.state.count === 0) ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    formatCount(){\n        const { count } = this.state;\n        return count === 0 ? 'Zero' : count;\n    }\n}\n \nexport default Counter;"]},"metadata":{},"sourceType":"module"}