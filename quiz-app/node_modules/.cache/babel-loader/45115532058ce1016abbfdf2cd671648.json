{"ast":null,"code":"var _jsxFileName = \"/Users/lucifer/Projects/React/quiz-app/src/index.js\";\nimport React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport './index.css';\nimport './constants';\nimport constants from './constants';\nimport QuestionBox from './components/questionbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass QuizApp extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      listOfQuestions: [],\n      score: 0\n    };\n\n    this.getQuestions = () => {\n      constants().then(questions => {\n        this.setState({\n          listOfQuestions: questions\n        });\n      });\n    };\n\n    this.computeAnswer = (answer, correctAnswer) => {\n      if (answer === correctAnswer) {}\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title\",\n        children: \" Quiz \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), this.state.listOfQuestions.length > 0 && this.state.listOfQuestions.map(({\n        question,\n        answers,\n        correct,\n        questionId\n      }) => /*#__PURE__*/_jsxDEV(QuestionBox, {\n        question: question,\n        options: answers,\n        selected: answer => this.computeAnswer(answer, correct)\n      }, questionId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 29\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDom.render( /*#__PURE__*/_jsxDEV(QuizApp, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 50,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/lucifer/Projects/React/quiz-app/src/index.js"],"names":["React","Component","ReactDom","constants","QuestionBox","QuizApp","state","listOfQuestions","score","getQuestions","then","questions","setState","computeAnswer","answer","correctAnswer","componentDidMount","render","length","map","question","answers","correct","questionId","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAO,aAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;;;AAEA,MAAMC,OAAN,SAAsBJ,SAAtB,CAA+B;AAAA;AAAA;AAAA,SAE3BK,KAF2B,GAEnB;AACJC,MAAAA,eAAe,EAAG,EADd;AAEJC,MAAAA,KAAK,EAAG;AAFJ,KAFmB;;AAAA,SAO3BC,YAP2B,GAOZ,MAAM;AACjBN,MAAAA,SAAS,GAAGO,IAAZ,CAAiBC,SAAS,IAAI;AAC1B,aAAKC,QAAL,CAAc;AACVL,UAAAA,eAAe,EAAGI;AADR,SAAd;AAGH,OAJD;AAKH,KAb0B;;AAAA,SAmB3BE,aAnB2B,GAmBX,CAACC,MAAD,EAASC,aAAT,KAA2B;AACvC,UAAGD,MAAM,KAAKC,aAAd,EAA4B,CAE3B;AACJ,KAvB0B;AAAA;;AAe3BC,EAAAA,iBAAiB,GAAE;AACf,SAAKP,YAAL;AACH;;AAQDQ,EAAAA,MAAM,GAAE;AACJ,wBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAGQ,KAAKX,KAAL,CAAWC,eAAX,CAA2BW,MAA3B,GAAoC,CAApC,IAAyC,KAAKZ,KAAL,CAAWC,eAAX,CAA2BY,GAA3B,CACrC,CAAC;AAACC,QAAAA,QAAD;AAAWC,QAAAA,OAAX;AAAoBC,QAAAA,OAApB;AAA6BC,QAAAA;AAA7B,OAAD,kBACI,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAEH,QAAvB;AAAiC,QAAA,OAAO,EAAEC,OAA1C;AAAoE,QAAA,QAAQ,EAAEP,MAAM,IAAI,KAAKD,aAAL,CAAmBC,MAAnB,EAA0BQ,OAA1B;AAAxF,SAAwDC,UAAxD;AAAA;AAAA;AAAA;AAAA,cAFiC,CAHjD;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AAvC0B;;AA0C/BrB,QAAQ,CAACe,MAAT,eAAgB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA4BO,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5B","sourcesContent":["import React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport './index.css'\nimport './constants'\nimport constants from './constants';\nimport QuestionBox from './components/questionbox'\n\nclass QuizApp extends Component{\n\n    state = {\n        listOfQuestions : [],\n        score : 0\n    };\n\n    getQuestions = () => {\n        constants().then(questions => {\n            this.setState({\n                listOfQuestions : questions\n            });\n        });\n    }\n\n    componentDidMount(){\n        this.getQuestions();\n    }\n\n    computeAnswer = (answer, correctAnswer) => {\n        if(answer === correctAnswer){\n\n        }\n    }\n\n    render(){\n        return (\n            <div className='app-container'>\n                <div className=\"title\"> Quiz </div>\n                {\n                    this.state.listOfQuestions.length > 0 && this.state.listOfQuestions.map(\n                        ({question, answers, correct, questionId}) => (\n                            <QuestionBox question={question} options={answers} key={questionId} selected={answer => this.computeAnswer(answer,correct)} />\n                        )\n                    \n                    )\n                }\n            </div>\n        );\n    }\n}\n\nReactDom.render(<QuizApp />,document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}